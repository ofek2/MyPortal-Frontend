# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dev

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'MyIDF-DRS-DEV'
  imageRepository: 'front'
  containerRegistry: 'MyIDFACRDEV.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/test.Dockerfile'
  tag: '$(Build.BuildId)'
  sonarqubeServerEndpoint: 'MyIDF-DEV-FE'
  cliProjectName: 'MyIDF-DEV-FE'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
# - stage: SecurityScan
#   displayName: Security Scan
#   jobs:
#   - job: Scan
#     steps:
    
    
#     #Sonarqube + Dependency Check
#     - task: SonarQubePrepare@4
#       inputs:
#         SonarQube: '$(sonarqubeServerEndpoint)'
#         scannerMode: 'CLI'
#         configMode: 'manual'
#         cliProjectKey: '$(cliProjectKey)'
#         cliProjectName: '$(cliProjectName)'
#         cliSources: '.'
#         extraProperties: |
#           sonar.externalIssuesReportPaths=$(Build.ArtifactStagingDirectory)/gitleaks_sonar_format.json,$(Build.ArtifactStagingDirectory)/snyk_sonar_format.json,$(Build.ArtifactStagingDirectory)/semgrep_sonar_format.json
#           sonar.branch.name=$(Build.SourceBranchName)
   
#     - task: Bash@3
#       displayName: Download Tools    
#       inputs:
#         targetType: 'inline'
#         script: mkdir $(Build.ArtifactStagingDirectory)/CodeAnalysisLogs
#     - task: CSTask@1
#       inputs:
#         runGitleaks: true
#         runSemgrep: true
#         runSnyk: true
#         codeLang: 'javascript'
#         rootDir: '$(Build.SourcesDirectory)'
#         artifactsDir: '$(Build.ArtifactStagingDirectory)'
#         packageDir: '$(Build.SourcesDirectory)'
        
#     - task: PublishBuildArtifacts@1
#       displayName: "Publish analysis logs"
#       inputs:
#         PathtoPublish: "$(Build.ArtifactStagingDirectory)/CodeAnalysisLogs"
#         ArtifactName: "CodeAnalysisLogs"
#         publishLocation: "Container"
#     - task: SonarQubeAnalyze@4
    
#     - task: SonarQubePublish@4
#       inputs:
#         pollingTimeoutSec: '300'
      