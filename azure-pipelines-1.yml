# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Shared tags
  imageRepository: 'front'
  dockerfilePath: '$(Build.SourcesDirectory)/prod.Dockerfile'
  tag: '$(Build.BuildId)'
  
  # TEST environment tags
  dockerRegistryServiceConnection: '615829c9-3fda-4c2d-9f7a-aaa62cf6c080'

  # Digital tags
  digitalacr: 'sharedacr'
  Digital-imageRepository: 'myportal/client'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: Docker@2
      displayName: Login to Digital ACR
      inputs:
        command: login
        containerRegistry: $(digitalacr)

    - task: Docker@2
      displayName: Digital ACR - Build and push an image to container registry - 
      inputs:
        command: buildAndPush
        repository: $(Digital-imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(digitalacr)
        tags: |
          $(tag)

    - task: Docker@2
      displayName: Logout of ACR ACR
      inputs:
        command: logout
        containerRegistry: $(digitalacr)
- stage: SecurityScan
  displayName: Security Scan
  jobs:
  - job: Scan
    steps:
    
    #Sonarqube + Dependency Check
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: '$(sonarqubeServerEndpoint)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(cliProjectKey)'
        cliProjectName: '$(cliProjectName)'
        cliSources: '.'
        extraProperties: |
          sonar.externalIssuesReportPaths=$(Build.ArtifactStagingDirectory)/gitleaks_sonar_format.json,$(Build.ArtifactStagingDirectory)/snyk_sonar_format.json,$(Build.ArtifactStagingDirectory)/semgrep_sonar_format.json
          sonar.branch.name=$(Build.SourceBranchName)

    - task: Bash@3
      displayName: Download Tools    
      inputs:
        targetType: 'inline'
        script: mkdir $(Build.ArtifactStagingDirectory)/CodeAnalysisLogs

    - task: CSTask@1
      inputs:
        runGitleaks: true
        runSemgrep: true
        runSnyk: true
        codeLang: 'javascript'
        rootDir: '$(Build.SourcesDirectory)'
        artifactsDir: '$(Build.ArtifactStagingDirectory)'
        packageDir: '$(Build.SourcesDirectory)'
        
    - task: PublishBuildArtifacts@1
      displayName: "Publish analysis logs"
      inputs:
        PathtoPublish: "$(Build.ArtifactStagingDirectory)/CodeAnalysisLogs"
        ArtifactName: "CodeAnalysisLogs"
        publishLocation: "Container"
    - task: SonarQubeAnalyze@4
    
    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'
      